import { useEffect, useState, Fragment } from "react";

export const DEFAULT_SETTINGS = {
  inventory: [],
  messages: {
    empty: "No words found"
  },
  font: {
    maxFontSize: 20,
    minFontSize: 8
  }
};

/**
 * A word cloud that is based on a given inventory of words. In a 
 * word cloud the words found in the inventory are displayed with 
 * font sizes proportional to their frequency in the inventory. 
 * The word cloud generated by this component has a light gray 
 * background and contains words that are wrapped inside `<span>`-
 * tags.
 */
export default function WordCloud(props) {
  /**
   * Inventory of words that are to be represented by the word 
   * cloud.
   */
  const inventory = props.inventory || DEFAULT_SETTINGS.inventory;

  /**
   * Maximum allowed font size for a single word of the word cloud.
   */
  const maxFontSize = props.maxFontSize || DEFAULT_SETTINGS.font.maxFontSize;

  /**
   * Minimum allowed font size for a single word of the word cloud
   */
  const minFontSize = props.minFontSize || DEFAULT_SETTINGS.font.minFontSize;

  /**
   * Message that is to be displayed if the word cloud has no 
   * words in the inventory.
   */
  const messageEmpty = props.messageEmpty || DEFAULT_SETTINGS.messages.empty;

  const [occurrenceRange, setOccurrenceRange] = useState({
    highestOccurrences: 0,
    lowestOccurrences: 0
  });

    // Determine the lowest and highest number of occurrences for a 
    // single word in order to size the words properly
  useEffect(() => {
    let highestOccurrences = Number.MIN_SAFE_INTEGER;
    let lowestOccurrences = Number.MAX_SAFE_INTEGER;

    for( let item of inventory )
    {
      const occurrences = item.occurrences;

      if( occurrences > highestOccurrences )
      highestOccurrences = occurrences;
      
      if( occurrences < lowestOccurrences )
      lowestOccurrences = occurrences;
    }

    setOccurrenceRange({
      highestOccurrences: highestOccurrences,
      lowestOccurrences: lowestOccurrences
    });
  }, [inventory]);

  /**
   * Creates an array of `<span>`-elements that represent the words
   * of the word cloud. Each span will be given a font size based on
   * the frequency of the word contained within.
   * 
   * The `items` accepted by this function are JSONs that contain the 
   * word as well as the occurrence frequency.
   * 
   * @param {Array} items Array of word JSONs containing the word 
   * along with its frequency in the inventory.
   * 
   * @returns Array of `<span>`-elements representing the words of the 
   * word cloud.
   */
  const renderWordSpans = (items) => {
    const {
      highestOccurrences,
      lowestOccurrences
    } = occurrenceRange;

    const occurrenceDelta = highestOccurrences - lowestOccurrences;
    const fontSizeDelta = (maxFontSize - minFontSize);

      // No words
    if( items.length <= 0 )
    return messageEmpty;

      // Generate word cloud, if there are words
    return items.map((item, index) => {
      const fontSize = minFontSize + (item.occurrences - lowestOccurrences) / occurrenceDelta * fontSizeDelta;

      return(
        <Fragment key={"word-cloud-word-span-" + index}>
          <span style={{fontSize: fontSize + "px" }}>
            {item.word}
          </span>
          {' '}
        </Fragment>
      )
    });
  };

  return(
    <div className="d-flex justify-content-center">
      <div className="text-justify bg-light rounded-5 p-3">
        {renderWordSpans(inventory)}
      </div>
    </div>
  );
}
