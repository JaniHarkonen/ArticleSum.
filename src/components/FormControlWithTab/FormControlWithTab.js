import { useEffect, useState } from "react";

import addEventListenerTo from "../../utils/addEventListenerTo";

/**
 * This wrapper takes in the React-function of an input element 
 * and provides it with the functionality of using tabs. The 
 * wrapper also accepts the strings `input` and `textarea` as its 
 * elements. These strings will be resolved into corresponding HTML
 * tags `<input>` and `<textarea>`. The props of this wrapper will 
 * be forwarded to the `WrappedElement`.
 * 
 * Typically, when the user presses the TAB-key while an `<input>`- or
 * `<textarea>`-element is active, the focus will shift onto the next
 * element in the focus-order. This wrapper will prevent this default 
 * action, and instead, inputs a tab (`\t`) character into the element.
 * Because TAB-input is done programmatically, a "simulated" input 
 * event must be generated each time TAB-key is pressed. React, however,
 * does not allow the programmatic triggering of input events and, as 
 * such, the `onChange`-hook of this component doesn't return an event-
 * object like other input elements.
 * 
 * When the input of the target element changes, the parent component
 * is updated with a JSON containing the following information:
 * - whether the input event was a TAB-press
 * - the current value of the input
 * - the event-object generated by the input event (ONLY if the 
 * event was NOT a TAB-press)
 * This structure ensures that the parent component can extract the 
 * value of the input regardless of whether the input event was 
 * programmatically generated or not. The parent component still has 
 * access to the event-object if the input was not a TAB-press.
 */
export default function FormControlWithTab (props) {
  /**
   * The element that should obtain the tabbing functionality.
   */
  const WrappedElement = props.element;

  /**
   * Current value of the input field.
   */
  const value = props.value;

  /**
   * Hook that updates the parent component when the input changes.
   * **Notice:** this hook differs from the typical `onChange` of an
   * `<input>`-element, for example. This hook will return a JSON 
   * containing the following information:
   * - whether the input event was a TAB-press
   * - the current value of the input
   * - the event-object generated by the input event (ONLY if the 
   * event was NOT a TAB-press)
   */
  const onChange = props.onChange;

  const [cursorPosition, setCursorPosition] = useState(-1); // Current cursor position within the input element
  const [cursorPositionChanged, setCursorPositionChanged] = useState(0);  // Used to force component re-render to avoid `cursorPosition`-dependency
  const [inputRef, setInputRef] = useState(null); // Input element reference

    // Sets the cursor position within the input element after tab is pressed
    // and creates a "keydown"-listener for handling the tab press
  useEffect(() => {
    if( inputRef && cursorPosition >= 0 )
    {
      inputRef.selectionStart = inputRef.selectionEnd = cursorPosition;
      setCursorPosition(-1);
    }

    return addEventListenerTo(document, {
      type: "keydown",
      listener: handleTab
    });

  }, [
    value,
    inputRef,
    cursorPositionChanged
  ]);

  /**
   * Sets the cursor position within the input element accorind to the 
   * index found in `cursorPosition`-state.
   */
  const resetCursorPosition = () => setCursorPositionChanged(cursorPositionChanged + 1);

  /**
   * Handles the changing of the input by updating the parent component
   * with an event JSON. The change event produces different kinds of 
   * event JSONs depending on whether a TAB-press was behind the input
   * change (see the function description for more information).
   * 
   * @param {*} changeObject A value representing the change of the 
   * input field. The type of the value may either be a string or a JSON.
   * If the input changed due to a regular key-event, the `changeObject`
   * should be the event-object of the input action. If the change was 
   * due to a TAB-press, the `changeObject` should only be the new 
   * value of the input field where the tab-character is placed at the 
   * appropriate position.
   * @param {Boolean} isTab Whether the change event was due to a TAB-
   * press.
   */
  const handleChange = (changeObject, isTab = false) => {
    if( isTab )
    {
      onChange({
        isTab,
        value: changeObject
      });
    }
    else
    {
      onChange({ 
        isTab, 
        value: changeObject.target.value, 
        e: changeObject
      });
    }
  };

  /**
   * Handles the pressing of the TAB-key by placing the tab-
   * character to the appropriate position in the input 
   * field.
   * 
   * @param {JSON} e Event-object from the "keydown"-event.
   */
  const handleTab = (e) => {
    if( e.key !== "Tab" )
    return;

    e.preventDefault();

    const tab = "\t";
    const selectionStart = inputRef.selectionStart;
    const selectionEnd = inputRef.selectionEnd;
    const newValue = value.substring(0, selectionStart) + tab + value.substring(selectionEnd);

    handleChange(newValue, true);
    setCursorPosition(selectionStart + tab.length);
    resetCursorPosition();
  };
  
  /**
   * Determines the appropriate JSX-element and returns it with
   * the props of this wrapper component passed in. If the 
   * `componentOrTag` is a React-component function, it will 
   * be returned with the appropriate props. The resulting component
   * is also provided with the `ref`-prop even though it may not
   * be used by the component. If the `componentOrTag` is either the 
   * `input`- or `textarea`-tag (string), a corresponding JSX-
   * element will be returned, once again, with the appropriate props
   * including `ref`.
   * 
   * @param {*} componentOrTag The React-component function or the 
   * string indicating the type of the JSX-component that is to be 
   * created.
   * @param {JSON} componentProps React-style props JSON that will
   * be passed onto the resulting component.
   * 
   * @returns Either an `<input>`- or `<textarea>`-element or a 
   * React-component in JSX-form.
   */
  const renderComponentOrTag = (componentOrTag, componentProps) => {
    const Element = componentOrTag;
    const inputRefSetter = (node) => setInputRef(node);

    componentProps = {
      ...componentProps,
      onChange: handleChange
    };

    switch( componentOrTag )
    {
      case "input":
        return (
          <input
            ref={inputRefSetter}
            {...componentProps}
          />
        );

      case "textarea": 
        return (
          <textarea
            ref={inputRefSetter}
            {...componentProps}
          />
        );

      default:
        return (
          <Element
            ref={inputRefSetter}
            {...componentProps}
          />
        );
    }
  };

  return renderComponentOrTag(WrappedElement, props);
}