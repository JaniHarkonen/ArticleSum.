import { useEffect } from "react";

import addEventListenerTo from "../../utils/addEventListenerTo";

/**
 * Custom hook that attaches a "keydown"-listener to the `document`.
 * When a "keydown"-event is registered, the appropriate listener 
 * from the `listeners`-prop will be triggered based on the `code`-
 * field of the event-object generated by the "keydown"-event. Each 
 * listener must be coupled with their code in the `listeners`-JSON.
 * 
 * When the React-component using this hook dismounts, the key listener
 * is also removed.
 * 
 * @param {JSON} props A JSON that contains the `listeners`-JSON 
 * where each key listener function must be paired with the `code` 
 * received from the "keydown"-event that should trigger the function.
 */
export default function useKeyListener(props) {
  /**
   * JSON of listeners from which the proper listener will be triggered 
   * according to the `code` of the "keydown"-event.
   */
  const listeners = props.listeners;

  useEffect(() => {
    return addEventListenerTo(
      document,
      { type: "keydown", listener: handleKeyPress }
    );
  });

  /**
   * Called when the "keydown"-event is registered. Dispatches the 
   * proper listener function based on the `code` field of the 
   * event-object generated by the "keydown"-event.
   * 
   * @param {JSON} e Event-object from the "keydown"-event.
   */
  const handleKeyPress = (e) => {
    const listener = listeners[e.code];

    if( listener !== undefined )
    {
      if( listener === null )
      e.preventDefault();
      else
      listener(e);
    }
  };
}
